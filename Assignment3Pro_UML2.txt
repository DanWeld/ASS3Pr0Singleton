@startuml Assignment3Pro

' Title
title Assignment3Pro - Design Patterns Implementation

' Use a professional skin
skinparam classAttributeIconSize 0
skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName Arial
skinparam packageStyle rectangle

' Packages
package "singleton" {
  class SingletonValuables {
    - instance: SingletonValuables
    - valueType: String
    - rememberedValueType: String
    --
    - SingletonValuables()
    + {static} getInstance(): SingletonValuables
    + {static} item(type: String): SingletonValuables
    + setValueType(type: String): void
    + getValueType(): String
    + {static} resetInstance(): void
    + equals(obj: Object): boolean
  }
  
  class SingletonLog {
    - instance: SingletonLog
    - logs: List<LogLine>
    --
    - SingletonLog()
    + {static} getInstance(): SingletonLog
    + addLog(text: String): void
    + getLogs(): List<LogLine>
    + writeToFile(filename: String): void
    + {static} resetInstance(): void
  }
  
  class LogLine {
    - text: String
    - timestamp: LocalDateTime
    - threadName: String
    --
    + LogLine(text: String)
    + getText(): String
    + getTimestamp(): LocalDateTime
    + getThreadName(): String
    + toString(): String
  }
  
  SingletonLog --> LogLine : contains >
}

package "producer_consumer_adapter" {
  interface DepositValuables {
    + add(valuable: SingletonValuables): void
    + take(): SingletonValuables
    + size(): int
    + isEmpty(): boolean
  }
  
  class Deposit {
    - valuables: ArrayList<SingletonValuables>
    - capacity: int
    --
    + Deposit(capacity: int)
    + add(valuable: SingletonValuables): void
    + take(): SingletonValuables
    + size(): int
    + isEmpty(): boolean
  }
  
  class Miner {
    - deposit: DepositValuables
    - valuableType: String
    - miningTime: int
    - running: boolean
    --
    + Miner(deposit: DepositValuables, type: String, miningTime: int)
    + run(): void
    + stopMining(): void
  }
  
  class ValuableTransporter {
    - deposit: DepositValuables
    - treasureRoomDoor: TreasureRoomDoor
    - targetValue: int
    - running: boolean
    --
    + ValuableTransporter(deposit: DepositValuables, door: TreasureRoomDoor, targetValue: int)
    + run(): void
    + stopTransporting(): void
  }
  
  Deposit ..|> DepositValuables
  Miner --> DepositValuables : produces for >
  ValuableTransporter --> DepositValuables : consumes from >
}

package "readers_writers_proxy" {
  interface TreasureRoomDoor {
    + acquireReadAccess(): TreasureRoom
    + acquireWriteAccess(): TreasureRoom
    + releaseReadAccess(): void
    + releaseWriteAccess(): void
  }
  
  class TreasureRoom {
    - valuables: ArrayList<SingletonValuables>
    --
    + addValuable(valuable: SingletonValuables): void
    + take(amount: int): ArrayList<SingletonValuables>
    + lookValuables(): ArrayList<SingletonValuables>
    + getTotalValue(): int
  }
  
  class TreasureRoomGuardsman {
    - treasureRoom: TreasureRoom
    - readersInside: int
    - writersInside: int
    --
    + TreasureRoomGuardsman()
    + acquireReadAccess(): TreasureRoom
    + acquireWriteAccess(): TreasureRoom
    + releaseReadAccess(): void
    + releaseWriteAccess(): void
  }
  
  class Accountant {
    - accessDoor: TreasureRoomDoor
    - inspectionFrequency: int
    - running: boolean
    --
    + Accountant(door: TreasureRoomDoor, frequency: int)
    + run(): void
    + stopInspecting(): void
  }
  
  class King {
    - accessDoor: TreasureRoomDoor
    - spendingFrequency: int
    - spendingAmount: int
    - running: boolean
    --
    + King(door: TreasureRoomDoor, frequency: int, amount: int)
    + run(): void
    + stopSpending(): void
  }
  
  TreasureRoomGuardsman ..|> TreasureRoomDoor
  TreasureRoomGuardsman --> TreasureRoom : protects >
  Accountant --> TreasureRoomDoor : reads through >
  King --> TreasureRoomDoor : writes through >
}

package "external.libraries" #DDDDDD {
  note "MyArrayList-0.1.jar\nContains utility.collection package" as JarNote
  
  interface "ListADT<T>" as ListADT {
  }
  
  class "ArrayList<T>" as ArrayList {
  }
  
  ArrayList ..|> ListADT
}

' Relationships between packages
Deposit --> "external.libraries.ArrayList" : adapts >
Miner --> "singleton.SingletonValuables" : creates >
Miner --> "singleton.SingletonLog" : logs to >
ValuableTransporter --> "singleton.SingletonValuables" : transports >
ValuableTransporter --> "singleton.SingletonLog" : logs to >
ValuableTransporter --> "readers_writers_proxy.TreasureRoomDoor" : delivers to >
TreasureRoom --> "external.libraries.ArrayList" : uses >
TreasureRoom --> "singleton.SingletonValuables" : stores >
Accountant --> "singleton.SingletonLog" : logs to >
King --> "singleton.SingletonLog" : logs to >

@enduml
